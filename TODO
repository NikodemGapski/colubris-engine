# TODO

## HANDLES
- what if a component has a pointer to a gameobject that's been detroyed? how to handle dangling pointers? - HANDLES
- find an alternative to the 'handy transform variable' in gameobject (it's not safe being modifiable)

## OPTIMISATIONS
- general optimisations (data-oriented design)
- faster collision detection for circles, sweeping (as a general collision optimisation)
- check for collisions of two shapes by finding any point of one shape inside another (?)

## NEW SYSTEMS
- error logging

## RENDERING
- camera (remember about updating the Input::mouse_pos() method!)
- drawing collider outline for debugging
- texture rendering
- animation (?)

## FONT
- dynamic scaling

## UI ELEMENTS
- draggable components
- default shapes (text box, drop-down list, window)
- add Circle shape
- the Input has to ask Camera where the mouse is in the game space

## OTHERS
- prefabs

## BUGS AND ISSUES:
- a little issue with gameobjects having their render_layer set before registration (despite not yet belonging to the layer)
- bug: if a new GameObject is created in a start() method, regitration has a problem
- dangling listeners (cannot unsubscribe to an event)
- math::sort_polar() edge case - when used in ConvexShape, sometimes we want the points on the same line to be ordered in increasing, and sometimes in decreasing order

## DOCS
- Input emits the mouse event,
- MouseComponentI interface,
- new Renderer methods,
- how to invoke mouse event in-code,
- no ColliderShape anymore (Shape, ConvexShape (provided points may end up reordered!)),
- math::sort_polar()
- mouse buttons, mouse position, and mouse event
- MouseComponentI!!

# Changes - UI update
- FONT
- EVENT SYSTEM
- improved render ordering
- mouse events, MouseComponentI